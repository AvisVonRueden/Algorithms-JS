<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script>
      // 方法一：优先队列

      /**
       * @param {number} n
       * @param {number} k
       * @param {number[][]} time
       * @return {number}
       */
      var findCrossingTime = function (n, k, time) {
        time.sort((a, b) => a[0] + a[2] - (b[0] + b[2])); // 稳定排序

        let workL = new MinPriorityQueue({ priority: (e) => e[1] });
        let workR = new MinPriorityQueue({ priority: (e) => e[1] });
        let waitL = new MaxPriorityQueue({ priority: (e) => e[0] });
        let waitR = new MaxPriorityQueue({ priority: (e) => e[0] });
        for (let i = k - 1; i >= 0; i--) waitL.enqueue([i, 0]); // 下标越大效率越低

        let cur = 0;
        while (n) {
          while (!workL.isEmpty() && workL.front().element[1] <= cur)
            waitL.enqueue(workL.dequeue().element); // 左边完成放箱
          while (!workR.isEmpty() && workR.front().element[1] <= cur)
            waitR.enqueue(workR.dequeue().element); // 右边完成搬箱
          if (!waitR.isEmpty()) {
            // 右边过桥，注意加到 waitR 中的都是 <= cur 的（下同）
            let p = waitR.dequeue().element;
            cur += time[p[0]][2];
            p[1] = cur + time[p[0]][3];
            workL.enqueue(p); // 放箱
          } else if (!waitL.isEmpty()) {
            // 左边过桥
            let p = waitL.dequeue().element;
            cur += time[p[0]][0];
            p[1] = cur + time[p[0]][1];
            workR.enqueue(p); // 搬箱
            n--;
          } else if (workL.isEmpty()) {
            // cur 过小，下面找个最小的放箱/搬箱完成时间来更新 cur
            cur = workR.front().element[1];
          } else if (workR.isEmpty()) {
            cur = workL.front().element[1];
          } else {
            cur = Math.min(workL.front().element[1], workR.front().element[1]);
          }
        }

        while (!workR.isEmpty()) {
          const [i, t] = workR.dequeue().element; // 右边完成搬箱
          // 如果没有排队，直接过桥；否则由于无论谁先过桥，最终完成时间都一样，所以也可以直接计算
          cur = Math.max(t, cur) + time[i][2];
        }
        return cur; // 最后一个过桥的时间
      };
    </script>
  </body>
</html>
